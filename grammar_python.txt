Terminals:
'if' 'while' 'return' 'class' 'def' 'not' 'or' 'False' 'None' 'True' 'and' 'as' 'break' 'continue' 'elif' 'else''from' 'import' 'in' 'is' 'pass' 'raise' 'with' 'object'
Variables:
IF WHILE RETURN CLASS DEF NOT OR FALSE NONE TRUE AND AS BREAK CONTINUE ELIF ELSE FROM IMPORT IN IS PASS RAISE WITH OBJECT
Grammar:
S -> FROM OBJECT IMPORT OBJECT AS OBJECT
S -> IMPORT OBJECT
S -> FROM OBJECT IMPORT OBJECT
S -> IMPORT OBJECT AS OBJECT
FROM -> 'from'
IMPORT -> 'import'
AS -> 'as'
OBJECT -> 'object'
S -> WHILE ( CONDITION )
CONDITION -> EQUATION1
CONDITION -> EQUATION2
EQUATION1 -> VAR1 SYMBOL2 VAR2
EQUATION1 -> VAR1 SYMBOL2 CONST
EQUATION1 -> NOT VAR1
EQUATION2 -> VAR1 SYMBOL2 VAR2 AND CONDITION
EQUATION2 -> VAR1 SYMBOL2 CONST AND CONDITION
EQUATION2 -> VAR1 SYMBOL2 VAR2 OR CONDITION
EQUATION2 -> VAR1 SYMBOL2 CONST OR CONDITION
EQUATION2 -> NOT VAR1 AND CONDITION
WHILE -> 'while'
( -> '('
) -> ')'
AND -> 'and'
NOT -> 'not'
OR -> 'or'
SYMBOL2 -> '=='
SYMBOL2 -> '!='
SYMBOL2 -> '>='
SYMBOL2 -> '<='
SYMBOL2 -> '>'
SYMBOL2 -> '<'
S -> IF ( CONDITION )
CONDITION -> EQUATION1
CONDITION -> EQUATION2
EQUATION1 -> VAR1 SYMBOL2 VAR2
EQUATION1 -> VAR1 SYMBOL2 CONST
EQUATION1 -> NOT VAR1
EQUATION2 -> VAR1 SYMBOL2 VAR2 AND CONDITION
EQUATION2 -> VAR1 SYMBOL2 CONST AND CONDITION
EQUATION2 -> VAR1 SYMBOL2 VAR2 OR CONDITION
EQUATION2 -> VAR1 SYMBOL2 CONST OR CONDITION
EQUATION2 -> NOT VAR1 AND CONDITION
IF -> 'if'
( -> '('
) -> ')'
AND -> 'and'
NOT -> 'not'
OR -> 'or'
SYMBOL2 -> '=='
SYMBOL2 -> '!='
SYMBOL2 -> '>='
SYMBOL2 -> '<='
SYMBOL2 -> '>'
SYMBOL2 -> '<'
S -> CONST SYMBOL1 CONST
S -> CONST SYMBOL1 VAR1
S -> CONST SYMBOL1 S
S -> VAR1 SYMBOL1 CONST
S -> VAR1 SYMBOL1 VAR2
S -> VAR1 SYMBOL1 S
SYMBOL1 -> '='
SYMBOL1 -> '+'
SYMBOL1 -> '*'
SYMBOL1 -> '/'
SYMBOL1 -> '-'
S -> RETURN CONST
S -> RETURN VAR
S -> RETURN BOOL
S -> RETURN NONE
S -> RETURN ( CONDITION )
RETURN -> 'return'
( -> '('
) -> ')'
BOOL -> 'true'
BOOL -> 'false'
NONE -> 'none'
AND -> 'and'
OR -> 'or'
NOR -> 'nor'
CONDITION -> EQUATION1
CONDITION -> EQUATION2
EQUATION1 -> VAR1 SYMBOL2 VAR2
EQUATION1 -> VAR1 SYMBOL2 CONST
EQUATION1 -> NOT VAR1
EQUATION2 -> VAR1 SYMBOL2 VAR2 AND CONDITION
EQUATION2 -> VAR1 SYMBOL2 CONST AND CONDITION
EQUATION2 -> VAR1 SYMBOL2 VAR2 OR CONDITION
EQUATION2 -> VAR1 SYMBOL2 CONST OR CONDITION
EQUATION2 -> NOT VAR1 AND CONDITION
S -> DEF FUNCTION ( PARAMETER ) :
PARAMETER -> VAR1 , PARAMETER
PARAMETER-> VAR1
PARAMETER -> ''
( -> '('
) -> ')'
: -> ':'
, -> ','
S -> VAR1 SYMBOL1 INTEGER
S -> VAR1 SYMBOL1 CHAR
S -> VAR1 SYMBOL1 BOOL
S -> VAR1 SYMBOL1 FLOAT
S -> VAR1 SYMBOL1 STRING
INTEGER -> 'integer'
CHAR -> 'char'
BOOL -> 'bool'
BOOL -> 'true'
BOOL -> 'false'
FLOAT -> 'float'
STRING -> 'string'
S -> ELIF ( CONDITION )
CONDITION -> EQUATION1
CONDITION -> EQUATION2
EQUATION1 -> VAR1 SYMBOL2 VAR2
EQUATION1 -> VAR1 SYMBOL2 CONST
EQUATION1 -> NOT VAR1
EQUATION2 -> VAR1 SYMBOL2 VAR2 AND CONDITION
EQUATION2 -> VAR1 SYMBOL2 CONST AND CONDITION
EQUATION2 -> VAR1 SYMBOL2 VAR2 OR CONDITION
EQUATION2 -> VAR1 SYMBOL2 CONST OR CONDITION
EQUATION2 -> NOT VAR1 AND CONDITION
ELIF -> 'elif'
( -> '('
) -> ')'
AND -> 'and'
NOT -> 'not'
OR -> 'or'
SYMBOL2 -> '=='
SYMBOL2 -> '!='
SYMBOL2 -> '>='
SYMBOL2 -> '<='
SYMBOL2 -> '>'
SYMBOL2 -> '<'
S -> FOR VAR1 IN RANGE ( CONST )
S -> FOR VAR1 IN RANGE ( VAR2 )
FOR -> 'for'
IN -> 'in'
RANGE -> 'range'
( -> '('
) -> ')'
S -> CLASS NAME :
CLASS -> 'class'
: -> ':'
S -> CONTINUE
CONTINUE -> continue
S -> BREAK
BREAK -> 'break'
S -> PASS
PASS -> 'pass'
S -> WITH 
WITH -> 'with'
S -> ELSE
ELSE -> 'else'
S -> RAISE EXCEPTION ( INSIDE )
RAISE -> 'raise'
EXCEPTION -> 'exception'
